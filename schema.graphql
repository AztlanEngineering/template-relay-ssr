schema {
  query: Query
  mutation: Mutation
}

type BlogCategoryNode implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  slug: String!
  seoTitleTag: String
  seoMetaDescription: String
  description: String
  blogPosts(offset: Int, before: String, after: String, first: Int, last: Int, slug: String, slug_Icontains: String, slug_Istartswith: String, title: String, title_Icontains: String, category: ID): BlogPostNodeConnection!
}

type BlogCategoryNodeConnection {
  pageInfo: PageInfo!
  edges: [BlogCategoryNodeEdge]!
}

type BlogCategoryNodeEdge {
  node: BlogCategoryNode
  cursor: String!
}

enum BlogPostItemType {
  HTTPS_SCHEMA_ORG_BLOGPOSTING
  HTTPS_SCHEMA_ORG_FAQ
  HTTPS_SCHEMA_ORG_HOWTO
}

type BlogPostNode implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  slug: String!
  seoTitleTag: String
  seoMetaDescription: String
  description: String
  content: String
  author: UserType
  category: BlogCategoryNode
  itemType: BlogPostItemType!
  wordCount: Int
  publishedOn: DateTime
}

type BlogPostNodeConnection {
  pageInfo: PageInfo!
  edges: [BlogPostNodeEdge]!
}

type BlogPostNodeEdge {
  node: BlogPostNode
  cursor: String!
}

scalar DateTime

input DeleteJSONWebTokenCookieInput {
  clientMutationId: String
}

type DeleteJSONWebTokenCookiePayload {
  deleted: Boolean!
  clientMutationId: String
}

input DeleteRefreshTokenCookieInput {
  clientMutationId: String
}

type DeleteRefreshTokenCookiePayload {
  deleted: Boolean!
  clientMutationId: String
}

scalar GenericScalar

type Mutation {
  tokenAuth(input: ObtainJSONWebTokenInput!): ObtainJSONWebTokenPayload
  verifyToken(input: VerifyInput!): VerifyPayload
  refreshToken(input: RefreshInput!): RefreshPayload
  deleteTokenCookie(input: DeleteJSONWebTokenCookieInput!): DeleteJSONWebTokenCookiePayload
  revokeToken(input: RevokeInput!): RevokePayload
  deleteRefreshTokenCookie(input: DeleteRefreshTokenCookieInput!): DeleteRefreshTokenCookiePayload
}

interface Node {
  id: ID!
}

type OAuth2LinksProvider {
  google: String!
}

input ObtainJSONWebTokenInput {
  clientMutationId: String
  username: String!
  password: String!
}

type ObtainJSONWebTokenPayload {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  user: UserType
  clientMutationId: String
  token: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  blogCategory(id: ID!): BlogCategoryNode
  allBlogCategories(offset: Int, before: String, after: String, first: Int, last: Int, name: String, slug: String): BlogCategoryNodeConnection
  blogPost(id: ID!): BlogPostNode
  allBlogPosts(offset: Int, before: String, after: String, first: Int, last: Int, slug: String, slug_Icontains: String, slug_Istartswith: String, title: String, title_Icontains: String, category: ID): BlogPostNodeConnection
  oAuth2Login(resource: String!, additionalStatePayload: String): OAuth2LinksProvider
  hello: String
  authHello: String
  time: DateTime
  customMessage: String
}

input RefreshInput {
  token: String
  clientMutationId: String
}

type RefreshPayload {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  clientMutationId: String
  token: String!
}

input RevokeInput {
  refreshToken: String
  clientMutationId: String
}

type RevokePayload {
  revoked: Int!
  clientMutationId: String
}

type UserType implements Node {
  id: ID!
  password: String!
  lastLogin: DateTime
  isSuperuser: Boolean!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  isStaff: Boolean!
  isActive: Boolean!
  dateJoined: DateTime!
  blogPosts(offset: Int, before: String, after: String, first: Int, last: Int, slug: String, slug_Icontains: String, slug_Istartswith: String, title: String, title_Icontains: String, category: ID): BlogPostNodeConnection!
}

input VerifyInput {
  token: String
  clientMutationId: String
}

type VerifyPayload {
  payload: GenericScalar!
  clientMutationId: String
}
